// <auto-generated />
using System;
using GolfPracticeTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GolfPracticeTracker.Migrations
{
    [DbContext(typeof(GolfPracticeTrackerContext))]
    [Migration("20181228211839_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GolfPracticeTracker.Models.GolfClub", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Brand");

                    b.Property<bool>("InBag");

                    b.Property<int>("Loft");

                    b.Property<string>("Make");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<int>("PlayerID");

                    b.Property<int?>("PracticeSessionID");

                    b.Property<DateTime>("PurchaseDate");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("PracticeSessionID");

                    b.ToTable("GolfClubs");
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.GolfShot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackSpinRpm");

                    b.Property<double>("BallMph");

                    b.Property<int>("CarryYards");

                    b.Property<double>("ClubMph");

                    b.Property<int>("DescentDegree");

                    b.Property<double>("FlightSeconds");

                    b.Property<double>("HeightYards");

                    b.Property<double>("LaunchDegree");

                    b.Property<int>("OfflineYards");

                    b.Property<int>("PracticeSessionID");

                    b.Property<double>("PtiScore");

                    b.Property<int>("RollYards");

                    b.Property<int>("ShotNumber");

                    b.Property<double>("SideDegree");

                    b.Property<int>("SideSpinRpm");

                    b.Property<int>("TotalYards");

                    b.HasKey("ID");

                    b.HasIndex("PracticeSessionID");

                    b.ToTable("GolfShots");
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.PlayerPracticeSessionAssignment", b =>
                {
                    b.Property<int>("PlayerPracticeSessionAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GolfClubID");

                    b.Property<int>("PlayerID");

                    b.Property<int>("PracticeSessionID");

                    b.HasKey("PlayerPracticeSessionAssignmentID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("PracticeSessionID");

                    b.ToTable("PlayerPracticeSessionAssignments");
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.PracticeSession", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("Altitude");

                    b.Property<DateTime>("PracticeDate");

                    b.HasKey("ID");

                    b.ToTable("PracticeSessions");
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.GolfClub", b =>
                {
                    b.HasOne("GolfPracticeTracker.Models.Player", "Player")
                        .WithMany("GolfClubs")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfPracticeTracker.Models.PracticeSession", "PracticeSession")
                        .WithMany()
                        .HasForeignKey("PracticeSessionID");
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.GolfShot", b =>
                {
                    b.HasOne("GolfPracticeTracker.Models.PracticeSession", "PracticeSession")
                        .WithMany("GolfShots")
                        .HasForeignKey("PracticeSessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfPracticeTracker.Models.PlayerPracticeSessionAssignment", b =>
                {
                    b.HasOne("GolfPracticeTracker.Models.Player", "Player")
                        .WithMany("PlayerPracticeSessionAssignments")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfPracticeTracker.Models.PracticeSession", "PracticeSession")
                        .WithMany("PlayerPracticeSessionAssignments")
                        .HasForeignKey("PracticeSessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
